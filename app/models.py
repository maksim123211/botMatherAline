from aiogram.types import ReplyKeyboardMarkup as RKM, KeyboardButton as KB

from django.utils.translation import gettext_lazy as _
from django.conf import settings
from django.db import models


class Account(models.Model):
    class Meta:
        verbose_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        verbose_name_plural = _("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

    class TempData:
        bot = None

    class Dialog:
        START = 'start'
        DEFAULT = 'default'
        GET_COUNT_PRODUCTS = 'get_count_products'

    first_name = models.TextField(verbose_name='–ò–º—è')
    last_name = models.TextField(default='', null=True, blank=True, verbose_name='–§–∞–º–∏–ª–∏—è')
    username = models.TextField(default=None, null=True, blank=True, verbose_name='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º')
    dialog = models.TextField(default=Dialog.START)
    temp = models.TextField(default='', null=True, blank=True)

    async def reply(self, text, **kwargs):
        processed_text = '\n'.join(text) if isinstance(text, list) else text
        return await self.TempData.bot.send_message(self.id, processed_text % kwargs[
            'concate'] if 'concate' in kwargs else processed_text, parse_mode='HTML',
                                                    reply_markup=(kwargs['keyboard'] if 'keyboard' in kwargs else None))

    async def return_menu(self, text=f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —á–∞—è!', **kwargs):
        self.dialog = self.Dialog.DEFAULT
        self.save()
        await self.reply(f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.first_name}!', keyboard=RKM([
            [KB('üè™ –ú–∞–≥–∞–∑–∏–Ω'), KB('üß∫ –ö–æ—Ä–∑–∏–Ω–∞')],
            [KB('üë• –û –Ω–∞—Å')]],
            resize_keyboard=True), **kwargs)

    async def return_the_keyboard(self, text):
        self.dialog = self.Dialog.DEFAULT
        self.save()
        await self.reply(text, keyboard=RKM([
            [KB('üè™ –ú–∞–≥–∞–∑–∏–Ω'), KB('üß∫ –ö–æ—Ä–∑–∏–Ω–∞')],
            [KB('üë• –û –Ω–∞—Å')]],
            resize_keyboard=True))

    def __str__(self):
        return f'{self.first_name} {self.last_name if self.last_name is not None else ""}'


class Category(models.Model):
    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"

    name = models.TextField(max_length=255, blank=False, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    def __str__(self):
        return self.name


class Product(models.Model):
    class Meta:
        verbose_name = "–ü—Ä–æ–¥—É–∫—Ç"
        verbose_name_plural = "–ü—Ä–æ–¥—É–∫—Ç—ã"

    name = models.TextField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', blank=False)
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', blank=True)
    price = models.DecimalField(verbose_name="–¶–µ–Ω–∞ –∑–∞ –ø–æ—Ä—Ü–∏—é", blank=False, max_digits=10, decimal_places=2)
    weight = models.IntegerField(verbose_name="–ü–æ—Ä—Ü–∏—è –≤ –≥—Ä–∞–º–º–∞—Ö", blank=False)
    image = models.ImageField(upload_to=settings.MEDIA_ROOT, default=None, null=True, verbose_name='–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞')
    category = models.ForeignKey(Category, blank=False, on_delete=models.CASCADE, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞")

    def __str__(self):
        return self.name


class AboutCompany(models.Model):
    class Meta:
        verbose_name = "–û –∫–æ–º–ø–∞–Ω–∏–∏"
        verbose_name_plural = "–û –∫–æ–º–ø–∞–Ω–∏–∏"

    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', blank=False)
    manager = models.TextField(verbose_name="–°—Å—ã–ª–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", blank=False)
    image = models.ImageField(upload_to=settings.MEDIA_ROOT, default=None, null=True, blank=False, verbose_name='–§–æ—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    receiving_address = models.TextField(verbose_name='–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞', blank=True)
    payment_details = models.TextField(verbose_name='–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞', blank=True)


class Order(models.Model):
    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"

    STATUS_NEW = 'new'
    STATUS_IN_PROGRESS = 'in_progress'
    STATUS_COMPLETED = 'completed'

    STATUS_CHOICES = (
        (STATUS_NEW, _('–ù–æ–≤—ã–π –∑–∞–∫–∞–∑')),
        (STATUS_IN_PROGRESS, _('–í –ø—Ä–æ—Ü–µ—Å—Å–µ')),
        (STATUS_COMPLETED, _('–û–ø–ª–∞—á–µ–Ω')),
    )

    RECEIVING_POINT = 'receiving_point'
    DELIVERY = 'delivery'

    TYPE_RECEIVING = (
        (RECEIVING_POINT, _('–°–∞–º–æ–≤—ã–≤–æ–∑')),
        (DELIVERY, _('–î–æ—Å—Ç–∞–≤–∫–∞')),
    )

    user = models.ForeignKey(Account, on_delete=models.CASCADE, verbose_name=_('–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'))
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default=STATUS_NEW, verbose_name=_('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'))
    receiving = models.CharField(max_length=30, choices=TYPE_RECEIVING, default=RECEIVING_POINT, verbose_name=_('–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è'))
    total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞', default=0)
    items_name = models.TextField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–∫–∞–∑–µ', blank=False, default="")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_('–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))


class OrderItem(models.Model):
    class Meta:
        verbose_name = "–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∑–∞–∫–∞–∑–æ–≤"
        verbose_name_plural = "–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∑–∞–∫–∞–∑–æ–≤"

    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name=_('–ü—Ä–æ–¥—É–∫—Ç'))
    order = models.ForeignKey(Order, on_delete=models.PROTECT, related_name='items', verbose_name=_('–ó–∞–∫–∞–∑'))
    buyer = models.ForeignKey(Account, on_delete=models.DO_NOTHING, verbose_name=_('–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'))
    quantity = models.IntegerField(default=1, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–û–±—â–∞—è —Å—É–º–º–∞')

    def __str__(self):
        return f'{self.product.name} x {self.quantity}'
