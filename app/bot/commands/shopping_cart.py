from app.bot import handler
from app.models import Account, Product, Category, Order, OrderItem, AboutCompany

from django.db.models import Sum
from django.db.models import Q

import pytz
from django.utils import timezone

from aiogram.types import InlineKeyboardMarkup as IKM, InlineKeyboardButton as IKB

from datetime import datetime


@handler.message(name='üß∫ –ö–æ—Ä–∑–∏–Ω–∞', dialog=Account.Dialog.DEFAULT)
async def _(message, path_args, bot, user):
    await shopping_cart(user)


async def shopping_cart(user):
    await user.reply("üïπ –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: ", keyboard=IKM(inline_keyboard=[
        [IKB("üñ• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="active_order")],
        [IKB("üíæ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="archive_order")]
    ]))


@handler.callback(name='archive_order', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    orders = Order.objects.filter(status=Order.STATUS_COMPLETED).all()

    if not orders:
        await user.reply('‚úñÔ∏è –£ –≤–∞—Å –µ—â–µ –µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!')
    else:
        moscow_tz = pytz.timezone('Europe/Moscow')
        moscow_time = timezone.now().astimezone(moscow_tz)

        await user.reply("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", keyboard=IKM(inline_keyboard=[
            [IKB(f'‚úîÔ∏è –ó–∞–∫–∞–∑ –Ω–∞ {order.total_price}—Ä. –æ—Ç {order.updated_at.astimezone(moscow_tz).strftime("%d.%m.%Y %H:%M")}', callback_data=f'archive_order_detail {order.id}')] for order in orders] + [
                [IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_shopping_cart')]
            ]))


@handler.callback(name='archive_order_detail', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    order = Order.objects.get(id=int(path_args[1]))
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = timezone.now().astimezone(moscow_tz)

    await user.reply(f'‚öôÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É:\n\n{order.items_name}\nüí∑ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {order.total_price} —Ä—É–±–ª–µ–π\nüìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {order.updated_at.astimezone(moscow_tz).strftime("%d.%m.%Y %H:%M")}', keyboard=IKM(inline_keyboard=[
        [IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='archive_order')]
        ]))


@handler.callback(name='active_order', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    order = Order.objects.filter(Q(status=Order.STATUS_NEW, user=user) | Q(status=Order.STATUS_IN_PROGRESS, user=user)).first()

    if not order:
        await user.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç!')
    else:
        user_order = OrderItem.objects.filter(buyer=user).all()

        await user.reply("üõç –ü—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:", keyboard=IKM(inline_keyboard=[
            [IKB(f'üñä {order_item}', callback_data=f'update_order {order_item.id}')] for order_item in user_order] + [
                [IKB('üí∑ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'create_an_order {order.id}')],
                [IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'back_shopping_cart')]
            ]))


@handler.callback(name='create_an_order', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    order = Order.objects.get(id=int(path_args[1]))
    order_items = OrderItem.objects.filter(order__id=order.id)
    total_price = order_items.aggregate(total=Sum('price'))['total']
    order.total_price = total_price
    order.status = Order.STATUS_IN_PROGRESS
    order.save()

    await user.reply(f"üì≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:", keyboard=IKM(inline_keyboard=[
        [IKB('üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π', callback_data=f'select_type_receiving {order.id} {Order.DELIVERY}')],
        [IKB('üß∞ –°–∞–º–æ–≤—ã–≤–æ–∑ –¢—É–ª–∞', callback_data=f'select_type_receiving {order.id} {Order.RECEIVING_POINT}')],
        [IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'active_order')]
    ])) 


@handler.callback(name='select_type_receiving', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    order = Order.objects.filter(id=int(path_args[1])).first()
    delivery_text = ''

    if Order.DELIVERY == path_args[2]:
        order.receiving = Order.DELIVERY
        order.save()
        delivery_text = "\n\n‚ùóÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É!"
    elif Order.RECEIVING_POINT == path_args[2]:
        order.receiving = Order.RECEIVING_POINT
        order.save()

    await user.reply(f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {order.total_price} —Ä—É–±–ª–µ–π\nüß∞ –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {order.get_receiving_display()}{delivery_text}", keyboard=IKM(inline_keyboard=[
        [IKB('üí∑ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data=f'payment_for_the_order {order.id}')],
        [IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'create_an_order {order.id}')]
    ])) 


@handler.callback(name='payment_for_the_order', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    order = Order.objects.filter(id=int(path_args[1])).first()
    company = AboutCompany.objects.first()

    await user.reply(f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞: <code>{company.payment_details}</code>\n\nüí∑ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.total_price} —Ä—É–±–ª–µ–π\nüß∞ –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {order.get_receiving_display()}", keyboard=IKM(inline_keyboard=[
        [IKB('‚úÖ –û–ø–ª–∞—Ç–∏–ª', callback_data=f'successful_payment {path_args[1]}')],
        [IKB('‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'select_type_receiving {path_args[1]} {order.receiving}')]
    ]))


@handler.callback(name='successful_payment', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    await user.reply("üíª –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ, –æ–∂–∏–¥–∞–π—Ç–µ")
    manager = Account.objects.filter(username="maxmotinm").first()
    order = Order.objects.filter(id=int(path_args[1])).first()

    await manager.reply(f"‚ûï –ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order.id}\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.user.first_name} " +
        f"{order.user.last_name}\n@{order.user.username}\n\nüí∑ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.total_price} —Ä—É–±–ª–µ–π", keyboard=IKM(inline_keyboard=[
            [IKB('‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∞', callback_data=f'finaly_payment_order {path_args[1]} success {user.id}')],
            [IKB('‚ùå –î–µ–Ω—å–≥–∏ –Ω–µ –ø—Ä–∏—à–ª–∏', callback_data=f'finaly_payment_order {path_args[1]} nonsuccess {user.id}')]
        ]))


@handler.callback(name='finaly_payment_order', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    order = Order.objects.filter(id=int(path_args[1])).first()
    company = AboutCompany.objects.first()
    buyer = Account.objects.filter(id=int(path_args[3])).first()
    
    if path_args[2] == "success":
        await user.reply(f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer.username}\n\nüí¥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_price} —Ä—É–±–ª–µ–π")
        await buyer.return_the_keyboard(f"ü•≥ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ –∑–∞–∫–∞–∑–µ –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É\n\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {order.id}\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_price} —Ä—É–±–ª–µ–π")
        order.status = Order.STATUS_COMPLETED
        
        order_items = OrderItem.objects.filter(buyer=buyer).all()
        print(order_items)
        order_item_objects = list(order_items)
        order_item_strings = [str(item) for item in order_item_objects]
        result_string = '\n'.join(order_item_strings)
        print(result_string)
        order.items_name = result_string
        order_items.delete()

        order.save()
    else:
        await buyer.reply(f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞:(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞: <code>{company.payment_details}</code>",
            keyboard=IKM(inline_keyboard=[
                [IKB('‚úÖ –û–ø–ª–∞—Ç–∏–ª', callback_data=f'successful_payment {path_args[1]}')],
                [IKB('‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'create_an_order {path_args[1]}')]
            ]))


@handler.callback(name='update_order', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    await user.reply("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–æ–≤–∞—Ä–æ–º: ", keyboard=IKM(inline_keyboard=[
        [IKB('üñä –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data=f'change_the_order {path_args[1]} {"update"}')],
        [IKB('üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'change_the_order {path_args[1]} {"delete"}')],
        [IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='active_order')]
    ]))


@handler.callback(name='change_the_order', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    if path_args[2] == "delete":
        order = OrderItem.objects.filter(id=int(path_args[1])).first()
        order.delete()
        await user.return_the_keyboard("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
    elif path_args[2] == "update":
        await user.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
        user.dialog = Account.Dialog.GET_COUNT_PRODUCTS
        user.temp = path_args[1]
        user.save()
    else:
        await user.return_the_keyboard("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!")


@handler.callback(name='back_shopping_cart', dialog=Account.Dialog.DEFAULT)
async def _(callback, path_args, bot, user):
    await callback.message.delete()
    await shopping_cart(user)
