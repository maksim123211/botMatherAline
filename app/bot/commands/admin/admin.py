from aiogram.types import InlineKeyboardMarkup as IKM, InlineKeyboardButton as IKB
from app.bot import handler
from app.models import Account
from datetime import datetime
import json


# @handler.message(name='–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', dialog=Account.Dialog.DEFAULT, admin=True)
# async def _(message, path_args, bot, user):
#     await user.reply(f'–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', keyboard=IKM(inline_keyboard=[
#         [IKB('üìñ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data = 'admin_events')],
#         [IKB('–ü—Ä–æ–µ–∫—Ç—ã', callback_data = 'admin_projects')],
#         [IKB('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data = 'add_admin')] if user.super_admin == True else [],
#         [IKB('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data = 'delete_admin')] if user.super_admin == True else []]))

# @handler.callback(name='main_admin_menu', admin=True)
# async def _(callback, path_args, bot, user):
# 	await callback.message.edit_text(f'–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=IKM(inline_keyboard=[
#         [IKB('üìñ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data = 'admin_events')],
#         [IKB('–ü—Ä–æ–µ–∫—Ç—ã', callback_data = 'admin_projects')],
#         [IKB('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data = 'add_admin')] if user.super_admin == True else [],
#         [IKB('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data = 'delete_admin')] if user.super_admin == True else []]))


# @handler.callback(name='admin_events', admin=True)
# async def _(callback, path_args, bot, user):
# 	await callback.message.edit_text('üìñ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (<i>—Å–∏–º–≤–æ–ª–æ–º üî∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</i>):', parse_mode='HTML', reply_markup=IKM(inline_keyboard=[
# 			[IKB('%s%s' % ('üî∏ ' if event.is_relevant else '', event.title), callback_data=f'admin_event {event.id}')] for event in Event.objects.all().order_by('-date_of_event')
# 		] + [
# 			[IKB('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ', callback_data='add_event')],
# 			[IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='main_admin_menu')]
# 		]))


# @handler.callback(name='admin_projects', admin=True)
# async def _(callback, path_args, bot, user):
#     await callback.message.edit_text('üìñ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:', parse_mode='HTML', reply_markup=IKM(inline_keyboard=[
# 			[IKB(f'{project.name}', callback_data=f'admin_project {project.id}')] for project in Project.objects.all()
# 		] + [
# 			[IKB('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ', callback_data='add_project')],
# 			[IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='main_admin_menu')]
# 		]))

# #########################################################################################

# @handler.callback(name='admin_project', admin=True)
# async def _(callback, path_args, bot, user):
#     if len(path_args) == 2 and path_args[1].isdigit():
#         project = Project.objects.filter(id = path_args[1]).first()
#         if project is not None:
# 	        income = '–≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π' if project.type == Project.Type.HIGH else ('—Å—Ä–µ–¥–Ω–µ–¥–æ—Ö–æ–¥–Ω—ã–π' if project.type == Project.Type.MEDIUM else '–Ω–∏–∑–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π')
# 	        await callback.message.edit_text(f'üíº –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: <b>{project.name}</b> ({income})\n\n–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: <b>{project.desc}</b>\n\n–°—Å—ã–ª–∫–∞: <a>{project.link}</a>', parse_mode='HTML', reply_markup=IKM(inline_keyboard=[
# 	                [IKB('‚≠êÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'edit_project_name {project.id}')],
# 					[IKB('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'edit_project_desc {project.id}')],
# 					[IKB('üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data=f'edit_project_link {project.id}')],
# 					[IKB('üíµ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', callback_data=f'edit_project_income {project.id}')],
# 					[IKB('üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_project {project.id}')],
# 					[IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_projects')]
# 	            ]))


# ##########################################################################################################
# @handler.callback(name='admin_event', admin=True)
# async def _(callback, path_args, bot, user):
# 	if len(path_args) == 2 and path_args[1].isdigit():
# 		event = Event.objects.filter(id=path_args[1]).first()
# 		if event is not None:
# 			await callback.message.edit_text(f'üìñ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>¬´{event.title}¬ª</b>\n\n{event.desc}', parse_mode='HTML', reply_markup=IKM(inline_keyboard=[
# 					[IKB('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'edit_event_title {event.id}')],
# 					[IKB('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'edit_event_desc {event.id}')],
# 					[IKB('–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: %s' % event.date_of_event.strftime('%d.%m.%Y %H:%M'), callback_data=f'edit_event_date_of_event {event.id}')],
# 					[IKB('–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: %s' % event.place, callback_data=f'edit_event_place {event.id}')],
# 					[IKB('–¶–µ–Ω–∞: %s —Ä—É–±.' % event.cost, callback_data=f'edit_event_cost {event.id}')],
# 					[IKB('–ö–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤: %s' % ('–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ' if event.number_of_tickets is None else event.number_of_tickets), callback_data=f'edit_event_number_of_tickets {event.id}')],
# 					[IKB('–ü–æ–∫—É–ø–∫–∞ –¥–æ: %s' % (event.finish_date.strftime('%d.%m.%Y %H:%M') if event.finish_date is not None else '–Ω–µ –∑–∞–¥–∞–Ω–æ'), callback_data=f'edit_event_finish_date {event.id}')],
# 					[IKB('–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data=f'delete_event {event.id}')],
# 					[IKB('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_events')]
# 				]))

# #######################################################################################################

# @handler.message(name='/id', admin=True)
# async def _(message, path_args, bot, user):
# 	await user.reply(f'–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç id: <b>{user.id}</b> —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–Ω –≤–∞—Å –¥–æ–±–∞–≤–∏—Ç\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É <b>–º–µ–Ω—é</b> –∏ —É –≤–∞—Å –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')


# @handler.callback(name='add_admin', admin=True)
# async def _(callback, path_args, bot, user):
# 	if user.super_admin:
# 		await user.reply('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É\
# 			<b>/id</b>, –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è id –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–î–æ–±–∞–≤–∏—Ç—å</b> –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –¥–∞–ª–µ–µ –í–∞–º –ø—Ä–∏–¥—É—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',\
# 			keyboard = IKM(inline_keyboard = [[IKB('–î–æ–±–∞–≤–∏—Ç—å', callback_data = f'add_admin_get_id')]]))


# @handler.callback(name='add_admin_get_id', admin=True)
# async def _(callback, path_args, bot, user):
# 	if user.super_admin:
# 		user.dialog = Account.Dialog.ADD_ADMIN_GET_ID
# 		await user.reply('–í–≤–µ–¥–∏—Ç–µ <b>/id</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–ª–æ–≤–µ–∫')


# @handler.message(name='', dialog=Account.Dialog.ADD_ADMIN_GET_ID, admin=True)
# async def _(message, path_args, bot, user):
# 	if message.text.isdigit() and user.super_admin:
# 		new_admin = Account.objects.filter(id = message.text).first()
# 		new_admin.admin = True
# 		new_admin.save()
# 		await user.reply(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {new_admin.first_name} —Å id: {new_admin.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')


# @handler.callback(name='delete_admin', admin=True)
# async def _(callback, path_args, bot, user):
# 	if user.super_admin:
# 		user.dialog = Account.Dialog.DELETE_ADMIN_GET_ID
# 		user.save()
# 		await user.reply('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ <b>/id</b>')


# @handler.message(name='', dialog=Account.Dialog.DELETE_ADMIN_GET_ID, admin=True)
# async def _(message, path_args, bot, user):
# 	if user.super_admin and message.text.isdigit():
# 		last_admin = Account.objects.filter(id=message.text).first()
# 		last_admin.admin = False
# 		last_admin.save()
# 		await user.return_menu(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {last_admin.first_name} —Å id: {last_admin.id} —É—Å–ø–µ—à–Ω–æ <b>—É–¥–∞–ª—ë–Ω</b>')
