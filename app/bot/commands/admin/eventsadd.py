from aiogram.types import InlineKeyboardMarkup as IKM, InlineKeyboardButton as IKB, ReplyKeyboardRemove as RKR, ReplyKeyboardMarkup as RKM
from app.bot import handler
from app.models import Account
from datetime import datetime, timezone
from decimal import Decimal
import ujson


# @handler.callback(name='add_event', admin=True)
# async def _(callback, path_args, bot, user):
#     user.dialog = Account.Dialog.CREATE_EVENT_TITLE
#     user.save()
#     await callback.message.delete()
#     await user.reply('‚≠êÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É', keyboard=RKR())
 
 
# @handler.message(name='', dialog = Account.Dialog.CREATE_EVENT_TITLE, admin=True)
# async def _(message, path_args, bot, user):
#     user.temp = ujson.dumps({'title': message.text})
#     user.dialog = Account.Dialog.CREATE_EVENT_DESC
#     user.save()
#     await user.reply('‚úèÔ∏è –ó–∞–¥–∞–π—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –≤ —Å–∏—Å—Ç–µ–º—É')
 
 
# @handler.message(name='', dialog = Account.Dialog.CREATE_EVENT_DESC, admin=True)
# async def _(message, path_args, bot, user):
#     user.temp = ujson.loads(user.temp)
#     user.temp['desc'] = message.text
#     user.temp = ujson.dumps(user.temp)
#     user.dialog = Account.Dialog.CREATE_EVENT_PLACE
#     user.save()
#     await user.reply('üîó –ó–∞–¥–∞–π—Ç–µ <b>–º–µ—Å—Ç–æ</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
 

# @handler.message(name='', dialog=Account.Dialog.CREATE_EVENT_PLACE, admin=True)
# async def _(message, path_args, bot, user):
#     user.temp = ujson.loads(user.temp)
#     user.temp['place'] = message.text
#     user.temp = ujson.dumps(user.temp)
#     user.dialog = Account.Dialog.CREATE_EVENT_COST
#     user.save()
#     await user.reply('üíµ –ó–∞–¥–∞–π—Ç–µ <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')


# @handler.message(name='', dialog=Account.Dialog.CREATE_EVENT_COST, admin=True)
# async def _(message, path_args, bot, user):
#     user.temp = ujson.loads(user.temp)
#     try:
#         cost = Decimal(message.text)
#         assert cost > 0
#     except:
#         return await user.reply('‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ —á–∏—Å–ª–æ–º –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ –Ω–æ–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä: 1500')
#     user.temp['cost'] = cost
#     user.temp = ujson.dumps(user.temp)
#     user.dialog = Account.Dialog.CREATE_EVENT_NUMBER_OF_TICKETS
#     user.save()
#     await user.reply('üíµ –ó–∞–¥–∞–π—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', keyboard=RKM([
#             ['‚è© –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ']
#         ], resize_keyboard=True))


# @handler.message(name='', dialog=Account.Dialog.CREATE_EVENT_NUMBER_OF_TICKETS, admin=True)
# async def _(message, path_args, bot, user):
#     user.temp = ujson.loads(user.temp)
#     if message.text.isdigit():
#         user.temp['number_of_tickets'] = message.text
#     elif '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ' in message.text.lower():
#         user.temp['number_of_tickets'] = None
#     else:
#         return await user.reply('‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: 100')
#     user.temp = ujson.dumps(user.temp)
#     user.dialog = Account.Dialog.CREATE_EVENT_DATE_OF_EVENT
#     user.save()
#     await user.reply('üíµ –ó–∞–¥–∞–π—Ç–µ <b>–¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12.10.2020 15:00', keyboard=RKR())


# @handler.message(name='', dialog=Account.Dialog.CREATE_EVENT_DATE_OF_EVENT, admin=True)
# async def _(message, path_args, bot, user):
#     user.temp = ujson.loads(user.temp)
#     try:
#         date = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
#         assert date > datetime.now()
#     except ValueError:
#         return await user.reply('‚ùóÔ∏è –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12.10.2020 15:00')
#     except:
#         return await user.reply('‚ùóÔ∏è –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º')
#     user.temp['date_of_event'] = message.text
#     user.temp = ujson.dumps(user.temp)
#     user.dialog = Account.Dialog.CREATE_EVENT_FINISH_DATE
#     user.save()
#     await user.reply('üíµ –ó–∞–¥–∞–π—Ç–µ <b>–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12.10.2020 15:00', keyboard=RKM([
#             ['‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
#         ], resize_keyboard=True))


# @handler.message(name='', dialog=Account.Dialog.CREATE_EVENT_FINISH_DATE, admin=True)
# async def _(message, path_args, bot, user):
#     user.temp = ujson.loads(user.temp)
#     if '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' in message.text.lower():
#         user.temp['finish_date'] = None
#     else:
#         try:
#             date = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
#             end_date = datetime.strptime(user.temp['date_of_event'], '%d.%m.%Y %H:%M')
#             assert date > datetime.now() and date <= end_date
#         except ValueError:
#             return await user.reply('‚ùóÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12.10.2020 15:00')
#         except:
#             return await user.reply('‚ùóÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
#         user.temp['finish_date'] = message.text
#     user.temp = ujson.dumps(user.temp)
#     user.dialog = Account.Dialog.DEFAULT
#     data = ujson.loads(user.temp)
#     user.save()
#     Event.objects.create(title = data['title'], desc = data['desc'], place = data['place'], cost = data['cost'], number_of_tickets = data['number_of_tickets'],\
#      date_of_event = data['date_of_event'] and datetime.strptime(data['date_of_event'], '%d.%m.%Y %H:%M'), finish_date = data['finish_date'] and datetime.strptime(data['finish_date'], '%d.%m.%Y %H:%M'), create_date = datetime.now())
#     await user.return_menu('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ <b>—Å–æ–∑–¥–∞–Ω!</b> –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à—É –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
#     await user.reply('–õ–∏–±–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–∞—à–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º', keyboard = IKM([[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É', callback_data = 'return_events')]]))
        

# ##############################################################################################

# # @handler.callback(name='edit_event')
# # async def _(callback, path_args, bot, user):
# #     if (user.admin == True or user.super_admin == True) and len(path_args) == 2 and path_args[1].isdigit():
# #         event = Event.objects.filter(id=path_args[1]).first()
# #         count = event.number_of_tickets if event.number_of_tickets >= 1 else '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'
# #         await callback.message.edit_text(f'üíº –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.title}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {event.cost}\n–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event.date_of_event}\n–û–ø–∏—Å–∞–Ω–∏–µ: {event.desc}\n–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event.place}\n\
# #         –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: {count}', parse_mode='HTML', reply_markup=IKM(inline_keyboard=[
# #                 [IKB('‚≠êÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'edit_event_title {event.id}')],
# #                 [IKB('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'edit_event_desc {event.id}')],
# #                 [IKB('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ', callback_data=f'edit_event_place {event.id}')],
# #                 [IKB('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data=f'edit_event_cost {event.id}')],
# #                 [IKB('üîó –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', callback_data=f'edit_event_number_of_tickets {event.id}')],
# #                 [IKB('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data=f'edit_event_date_of_event {event.id}')],
# #                 [IKB('üíµ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂', callback_data=f'edit_event_finish_date {event.id}')],
# #                 [IKB('üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_event {event.id}')],
# #             ]))

# ##########################################################################################################################
 
# @handler.callback(name='edit_event_title')
# async def _(callback, path_args, bot, user):
#     if (user.admin == True or user.super_admin == True) and len(path_args) == 2 and path_args[1].isdigit():
#         event = Event.objects.filter(id = path_args[1]).first()
#         if event is not None:
#             user.dialog = Account.Dialog.EDIT_EVENT_TITLE_DIALOG
#             user.temp = str(event.id)
#             user.save()
#             await callback.message.delete()
#             await user.reply('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', keyboard=RKR())
 
# @handler.message(name='', dialog = Account.Dialog.EDIT_EVENT_TITLE_DIALOG)
# async def _(message, path_args, bot, user):
#     if user.admin == True or user.super_admin == True:
#         event = Event.objects.filter(id = int(user.temp)).first()
#         if event is not None:
#             event.title = message.text
#             event.save()
#             user.dialog = Account.Dialog.DEFAULT
#             user.save()
#             await user.reply(f'‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{event.title}</b>', keyboard=IKM(inline_keyboard=[
#                 [IKB('‚úèÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data = f'admin_event {event.id}')],
#                 [IKB('üëÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É', callback_data = f'admin_events')]
#                 ]))
 
 
# @handler.callback(name = 'edit_event_desc')
# async def _(callback, path_args, bot, user):
#     if (user.admin == True or user.super_admin == True) and len(path_args) == 2 and path_args[1].isdigit():
#         event = Event.objects.filter(id = path_args[1]).first()
#         if event is not None:
#             user.dialog = Account.Dialog.EDIT_EVENT_DESC_DIALOG
#             user.temp = str(event.id)
#             user.save()
#             await callback.message.delete()
#             await user.reply('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', keyboard=RKR())
 
# @handler.message(name='', dialog = Account.Dialog.EDIT_EVENT_DESC_DIALOG)
# async def _(message, path_args, bot, user):
#     if user.admin == True or user.super_admin == True:
#         event = Event.objects.filter(id = int(user.temp)).first()
#         if event is not None:
#             event.desc = message.text
#             event.save()
#             user.dialog = Account.Dialog.DEFAULT
#             user.save()
#             await user.reply(f'‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞\n\n<b>{event.desc}</b>', keyboard=IKM(inline_keyboard=[
#                 [IKB('‚úèÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data = f'admin_event {event.id}')],
#                 [IKB('üëÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É', callback_data = f'admin_events')]
#                 ]))
 
 
# @handler.callback(name='edit_event_place', admin=True)
# async def _(callback, path_args, bot, user):
#     if len(path_args) == 2 and path_args[1].isdigit():
#         event = Event.objects.filter(id = path_args[1]).first()
#         if event is not None:
#             user.dialog = Account.Dialog.EDIT_EVENT_PLACE_DIALOG
#             user.temp = str(event.id)
#             user.save()
#             await callback.message.delete()
#             await user.reply('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', keyboard=RKR())
 

# @handler.message(name='', dialog=Account.Dialog.EDIT_EVENT_PLACE_DIALOG, admin=True)
# async def _(message, path_args, bot, user):
#     event = Event.objects.filter(id = int(user.temp)).first()
#     if event is not None:
#         event.place = message.text
#         event.save()
#         user.dialog = Account.Dialog.DEFAULT
#         user.save()
#         await user.reply(f'‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{event.place}</b>', keyboard=IKM(inline_keyboard=[
#             [IKB('‚úèÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data = f'admin_event {event.id}')],
#             [IKB('üëÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É', callback_data = f'admin_events')]
#         ]))
 

# @handler.callback(name='edit_event_cost', admin=True)
# async def _(callback, path_args, bot, user):
#     if len(path_args) == 2 and path_args[1].isdigit():
#         event = Event.objects.filter(id = path_args[1]).first()
#         if event is not None:
#             user.dialog = Account.Dialog.EDIT_EVENT_COST_DIALOG
#             user.temp = str(event.id)
#             user.save()
#             await callback.message.delete()
#             await user.reply('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', keyboard=RKR())
 

# @handler.message(name='', dialog = Account.Dialog.EDIT_EVENT_COST_DIALOG, admin = True)
# async def _(message, path_args, bot, user):
#     event = Event.objects.filter(id = int(user.temp)).first()
#     if event is not None:
#         event.cost = int(message.text)
#         event.save()
#         user.dialog = Account.Dialog.DEFAULT
#         user.save()
#         await user.reply(f'‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{event.cost}</b>', keyboard=IKM(inline_keyboard=[
#             [IKB('‚úèÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data = f'admin_event {event.id}')],
#             [IKB('üëÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É', callback_data = f'admin_events')]
#             ]))


# @handler.callback(name = 'edit_event_number_of_tickets')
# async def _(callback, path_args, bot, user):
#     if (user.admin == True or user.super_admin == True) and len(path_args) == 2 and path_args[1].isdigit():
#         event = Event.objects.filter(id = path_args[1]).first()
#         if event is not None:
#             user.dialog = Account.Dialog.EDIT_EVENT_NUMBER_OF_TICKETS_DIALOG
#             user.temp = str(event.id)
#             user.save()
#             await callback.message.delete()
#             await user.reply('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', keyboard=RKR())
 
# @handler.message(name='', dialog = Account.Dialog.EDIT_EVENT_NUMBER_OF_TICKETS_DIALOG)
# async def _(message, path_args, bot, user):
#     if user.admin == True or user.super_admin == True:
#         event = Event.objects.filter(id = int(user.temp)).first()
#         if event is not None:
#             if message.text.isdigit():
#                 event.number_of_tickets = int(message.text)
#                 event.save()
#             elif '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ' in message.text.lower():
#                 event.number_of_tickets = None
#             else:
#                 return await user.reply('‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: 100')
#             user.dialog = Account.Dialog.DEFAULT
#             user.save()
#             await user.reply(f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{event.number_of_tickets}</b>', keyboard=IKM(inline_keyboard=[
#                 [IKB('‚úèÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data = f'admin_event {event.id}')],
#                 [IKB('üëÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É', callback_data = f'admin_events')]
#                 ]))


# @handler.callback(name = 'edit_event_date_of_event')
# async def _(callback, path_args, bot, user):
#     if (user.admin == True or user.super_admin == True) and len(path_args) == 2 and path_args[1].isdigit():
#         event = Event.objects.filter(id = path_args[1]).first()
#         if event is not None:
#             user.dialog = Account.Dialog.EDIT_EVENT_DATE_OF_EVENT_DIALOG
#             user.temp = str(event.id)
#             user.save()
#             await callback.message.delete()
#             await user.reply('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12.10.2020 15:00', keyboard=RKR())
 

# @handler.message(name='', dialog = Account.Dialog.EDIT_EVENT_DATE_OF_EVENT_DIALOG)
# async def _(message, path_args, bot, user):
#     if user.admin == True or user.super_admin == True:
#         event = Event.objects.filter(id = int(user.temp)).first()
#         if event is not None:
#             try:
#                 date = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
#                 assert date > datetime.now()
#             except ValueError:
#                 return await user.reply('‚ùóÔ∏è –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12.10.2020 15:00')
#             except:
#                 return await user.reply('‚ùóÔ∏è –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º')
#             event.date_of_event = date
#             event.save()
#             user.dialog = Account.Dialog.DEFAULT
#             user.save()
#             await user.reply(f'‚úÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{event.date_of_event}</b>', keyboard=IKM(inline_keyboard=[
#                 [IKB('‚úèÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data = f'admin_event {event.id}')],
#                 [IKB('üëÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É', callback_data = f'admin_events')]
#                 ]))


# @handler.callback(name = 'edit_event_finish_date')
# async def _(callback, path_args, bot, user):
#     if (user.admin == True or user.super_admin == True) and len(path_args) == 2 and path_args[1].isdigit():
#         event = Event.objects.filter(id = path_args[1]).first()
#         if event is not None:
#             user.dialog = Account.Dialog.EDIT_EVENT_FINISH_DATE_DIALOG
#             user.temp = str(event.id)
#             user.save()
#             await callback.message.delete()
#             await user.reply('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12.10.2020 15:00',
#                 keyboard=RKM([['‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']], one_time_keyboard=True, resize_keyboard=True))
 

# @handler.message(name='', dialog = Account.Dialog.EDIT_EVENT_FINISH_DATE_DIALOG, admin = True)
# async def _(message, path_args, bot, user):
#     event = Event.objects.filter(id = int(user.temp)).first()
#     if event is not None:
#         if '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' in message.text.lower():
#             event.finish_date = None
#         else:
#             try:
#                 date = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
#                 assert date > datetime.now() and date.astimezone(timezone.utc) <= event.date_of_event
#             except ValueError:
#                 return await user.reply('‚ùóÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12.10.2020 15:00')
#             except Exception as ex:
#                 print(ex)
#                 return await user.reply('‚ùóÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
#             event.finish_date = date
#             event.save()
#         user.dialog = Account.Dialog.DEFAULT
#         user.save()
#         result = '–Ω–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' if event.finish_date is None else event.finish_date.strftime('%d.%m.%Y %H:%M')
#         await user.reply(f'‚úÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{result}</b>',keyboard=IKM(inline_keyboard=[
#             [IKB('‚úèÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data = f'admin_event {event.id}')],
#             [IKB('üëÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É', callback_data = f'admin_events')]
#             ]))

# ##################################################################

# @handler.callback(name='delete_event')
# async def _(callback, path_args, bot, user):
#     if (user.admin == True or user.super_admin == True) and len(path_args) == 2 and path_args[1].isdigit():
#         event = Event.objects.filter(id = path_args[1]).first()
#         if event is not None:
#             event.delete()
#             await callback.message.delete()
#             await user.reply(f'‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ <b>—É–¥–∞–ª–µ–Ω–æ</b>', keyboard=IKM(inline_keyboard=[
#                 [IKB('üëÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É', callback_data = f'admin_events')]
#                 ]))
 
# #############################################################################################################################################33


