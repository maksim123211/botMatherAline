from aiogram.types import InlineKeyboardMarkup as IKM, InlineKeyboardButton as IKB
from aiogram.types import ReplyKeyboardMarkup as RKM, KeyboardButton as KB
from app.bot import handler
import ujson
import urllib.request
from app.models import Account
from datetime import datetime

# # @handler.callback(name='edit_project')
# # async def _(callback, path_args, bot, user):
# # 	if (user.admin == True or user.super_admin == True) and len(path_args) == 2 and path_args[1].isdigit():
# # 		project = Project.objects.filter(id = path_args[1]).first()
# # 		income = '–≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π' if project.type == Project.Type.HIGH else ('—Å—Ä–µ–¥–Ω–µ–¥–æ—Ö–æ–¥–Ω—ã–π' if project.type == Project.Type.MEDIUM else '–Ω–∏–∑–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π')
# # 		await callback.message.edit_text(f'üíº –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: <b>{project.name}</b> ({income})\n\n–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: <b>{project.desc}</b>\n\n–°—Å—ã–ª–∫–∞: <b>{project.link}</b>', parse_mode='HTML', reply_markup=IKM(inline_keyboard=[
# # 				[IKB('‚≠êÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'edit_project_name {project.id}')],
# # 				[IKB('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'edit_project_desc {project.id}')],
# # 				[IKB('üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data=f'edit_project_link {project.id}')],
# # 				[IKB('üíµ –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', callback_data=f'edit_project_income {project.id}')],
# # 				[IKB('üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_project {project.id}')]
# # 			]))
 
 
# @handler.callback(name='edit_project_name', admin=True)
# async def _(callback, path_args, bot, user):
# 	if len(path_args) == 2 and path_args[1].isdigit():
# 		project = Project.objects.filter(id = path_args[1]).first()
# 		if project is not None:
# 			user.dialog = Account.Dialog.EDIT_PROJECT_NAME_DIALOG
# 			user.temp = str(project.id)
# 			user.save()
# 			await callback.message.edit_text('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')
 
 
# @handler.message(name='', dialog = Account.Dialog.EDIT_PROJECT_NAME_DIALOG, admin=True)
# async def _(message, path_args, bot, user):
# 	project = Project.objects.filter(id=user.temp).first()
# 	if project is not None:
# 		project.name = message.text
# 		project.save()
# 		user.dialog = Account.Dialog.DEFAULT
# 		user.save()
# 		await user.reply(f'‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{project.name}</b>', 
# 			keyboard = IKM(inline_keyboard = [
# 				[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É', callback_data='admin_projects')],
# 				[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data=f'admin_project {project.id}')]
# 			]))
 
 
# @handler.callback(name='edit_project_desc', admin=True)
# async def _(callback, path_args, bot, user):
# 	if len(path_args) == 2 and path_args[1].isdigit():
# 		project = Project.objects.filter(id=path_args[1]).first()
# 		if project is not None:
# 			user.dialog = Account.Dialog.EDIT_PROJECT_DESC_DIALOG
# 			user.temp = str(project.id)
# 			user.save()
# 			await callback.message.edit_text('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')
 
 
# @handler.message(name='', dialog = Account.Dialog.EDIT_PROJECT_DESC_DIALOG, admin=True)
# async def _(message, path_args, bot, user):
# 	project = Project.objects.filter(id=user.temp).first()
# 	if project is not None:
# 		project.desc = message.text
# 		project.save()
# 		user.dialog = Account.Dialog.DEFAULT
# 		user.save()
# 		await user.reply(f'‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞\n\n<b>{project.desc}</b>', 
# 			keyboard = IKM(inline_keyboard = [
# 				[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É', callback_data='admin_projects')],
# 				[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data=f'admin_project {project.id}')]
# 			]))
 
 
# @handler.callback(name='edit_project_link', admin=True)
# async def _(callback, path_args, bot, user):
# 	if len(path_args) == 2 and path_args[1].isdigit():
# 		project = Project.objects.filter(id=path_args[1]).first()
# 		if project is not None:
# 			user.dialog = Account.Dialog.EDIT_PROJECT_LINK_DIALOG
# 			user.temp = str(project.id)
# 			user.save()
# 			await callback.message.edit_text('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')
 
 
# @handler.message(name='', dialog = Account.Dialog.EDIT_PROJECT_LINK_DIALOG, admin=True)
# async def _(message, path_args, bot, user):
# 	project = Project.objects.filter(id=user.temp).first()
# 	if project is not None and urllib.request.urlopen(message.text):
# 		project.link = message.text
# 		project.save()
# 		user.dialog = Account.Dialog.DEFAULT
# 		user.save()
# 		await user.reply(f'‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{project.link}</b>', 
# 			keyboard = IKM(inline_keyboard = [
# 				[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É', callback_data='admin_projects')],
# 				[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data=f'admin_project {project.id}')]
# 			]))
# 	else:
# 		await user.reply('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')

 
# @handler.callback(name='edit_project_income', admin=True)
# async def _(callback, path_args, bot, user):
# 	if len(path_args) == 2 and path_args[1].isdigit():
# 		project = Project.objects.filter(id=path_args[1]).first()
# 		if project is not None:
# 			user.temp = str(project.id)
# 			user.save()
# 			await callback.message.edit_text('‚úèÔ∏è –° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=IKM(inline_keyboard=[
# 					[IKB('–í—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π', callback_data=f'set_project_income {Project.Type.HIGH} {project.id}')],
# 					[IKB('–°—Ä–µ–¥–Ω–µ–¥–æ—Ö–æ–¥–Ω—ã–π', callback_data=f'set_project_income {Project.Type.MEDIUM} {project.id}')],
# 					[IKB('–ù–∏–∑–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π', callback_data=f'set_project_income {Project.Type.LOW} {project.id}')]
# 				]))
 
 
# @handler.callback(name='set_project_income', admin=True)
# async def _(callback, path_args, bot, user):
# 	if len(path_args) == 3 and path_args[2].isdigit():
# 		project = Project.objects.filter(id=path_args[2]).first()
# 		if project is not None:
# 			income = '–≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π' if path_args[1] == Project.Type.HIGH else ('—Å—Ä–µ–¥–Ω–µ–¥–æ—Ö–æ–¥–Ω—ã–π' if path_args[1] == Project.Type.MEDIUM else '–Ω–∏–∑–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π')
# 			project.type = path_args[1]
# 			project.save()
# 			await callback.message.edit_text(f'‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{income}</b>', parse_mode='HTML', 
# 				reply_markup = IKM(inline_keyboard = [
# 					[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É', callback_data='admin_projects')],
# 					[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data=f'admin_project {project.id}')]
# 				]))
 
 
# @handler.callback(name='delete_project', admin=True)
# async def _(callback, path_args, bot, user):
# 	if len(path_args) == 2 and path_args[1].isdigit():
# 		project = Project.objects.filter(id=path_args[1]).first()
# 		if project is not None:
# 			project.delete()
# 			await callback.message.edit_text(f'‚úÖ –ü—Ä–æ–µ–∫—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ <b>—É–¥–∞–ª—ë–Ω</b>', parse_mode='HTML', 
# 				reply_markup = IKM(inline_keyboard = [[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É', callback_data='admin_projects')]]))
 
# #############################################################################################################################################33

# @handler.callback(name='add_project', admin=True)
# async def _(callback, path_args, bot, user):
# 	user.dialog = Account.Dialog.CREATE_PROJECT_NAME
# 	user.save()
# 	await user.reply('‚≠êÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É')
 
 
# @handler.message(name='', dialog = Account.Dialog.CREATE_PROJECT_NAME, admin=True)
# async def _(message, path_args, bot, user):
# 	user.temp = ujson.dumps({'name': message.text})
# 	user.dialog = Account.Dialog.CREATE_PROJECT_DESC
# 	user.save()
# 	await user.reply('‚úèÔ∏è –ó–∞–¥–∞–π—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –≤ —Å–∏—Å—Ç–µ–º—É')
 
 
# @handler.message(name='', dialog = Account.Dialog.CREATE_PROJECT_DESC, admin=True)
# async def _(message, path_args, bot, user):
# 	user.temp = ujson.loads(user.temp)
# 	user.temp['desc'] = message.text
# 	user.temp = ujson.dumps(user.temp)
# 	user.dialog = Account.Dialog.CREATE_PROJECT_LINK
# 	user.save()
# 	await user.reply('üîó –ó–∞–¥–∞–π—Ç–µ <b>—Å—Å—ã–ª–∫—É</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')

 
# @handler.message(name='', dialog = Account.Dialog.CREATE_PROJECT_LINK, admin=True)
# async def _(message, path_args, bot, user):
# 	if urllib.request.urlopen(message.text):
# 		user.temp = ujson.loads(user.temp)
# 		user.temp['link'] = message.text
# 		user.temp = ujson.dumps(user.temp)
# 		user.dialog = Account.Dialog.DEFAULT
# 		user.save()
# 		await user.reply('üíµ –° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b> –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', keyboard = IKM(inline_keyboard=[
# 			[IKB('–í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ', callback_data=f'create_project_income {Project.Type.HIGH}')],
# 			[IKB('–°—Ä–µ–¥–Ω–µ—Ä–∏—Å–∫–æ–≤—ã–µ', callback_data=f'create_project_income {Project.Type.MEDIUM}')],
# 			[IKB('–ù–∏–∑–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ', callback_data=f'create_project_income {Project.Type.LOW}')]
# 		]))
 
 
# @handler.callback(name='create_project_income', admin=True)
# async def _(callback, path_args, bot, user):
# 	if len(path_args) == 2:
# 		#income = '–≤—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π' if path_args[1] == Project.Type.HIGH else ('—Å—Ä–µ–¥–Ω–µ–¥–æ—Ö–æ–¥–Ω—ã–π' if path_args[1] == Project.Type.MEDIUM else '–Ω–∏–∑–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–π')
# 		data = ujson.loads(user.temp)
# 		Project.objects.create(name = data['name'], desc = data['desc'], link = data['link'], type = path_args[1])
# 		await user.reply('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ <b>—Å–æ–∑–¥–∞–Ω!</b> –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à—É –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
# 			keyboard = IKM(inline_keyboard = [[IKB('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É', callback_data='admin_projects')]]))
		
